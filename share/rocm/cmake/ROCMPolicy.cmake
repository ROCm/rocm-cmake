# ######################################################################################################################
# Copyright (C) 2017 Advanced Micro Devices, Inc.
# ######################################################################################################################

set(
    _rocm_cmake_policies
    "RCP0000" "Policy to automatically set up devel component." "0.6.0"
    "RCP0001" "Policy to automatically add dependency on rocm-core package." "0.6.0"
    "RCP0002" "Policy to set default component to runtime instead of unspecified." "0.7.0"
    "RCP0003" "Policy to automatically detect, setup, and install license files." "0.7.1"
    CACHE INTERNAL "Policies to control rocm-cmake."
)
set(_rocm_cmake_policy_stack_index -1 CACHE INTERNAL  "")

list(LENGTH _rocm_cmake_policies pol_max)
math(EXPR pol_max "${pol_max} - 1")
set(_rocm_cmake_policy_max "${pol_max}" CACHE INTERNAL "")

foreach(_polname_ind RANGE 0 ${pol_max} 3)
    math(EXPR _poldocs_ind "${_polname_ind} + 1")
    math(EXPR _polvers_ind "${_polname_ind} + 2")
    list(GET _rocm_cmake_policies ${_polname_ind} _polname)
    list(GET _rocm_cmake_policies ${_poldocs_ind} _poldocs)
    list(GET _rocm_cmake_policies ${_polvers_ind} _polvers)
    define_property(
        GLOBAL PROPERTY _rocm_policy_${_polname}
        BRIEF_DOCS "${_poldocs}"
        FULL_DOCS "${_poldocs} Set to NEW if requested rocm_cmake version >= ${polvers}."
    )
endforeach()

function(_rocm_set_policies_by_version VERSION)
    foreach(_polname_ind RANGE 1 $CACHE{_rocm_cmake_policy_max} 3)
        math(EXPR _polvers_ind "${_polname_ind} + 2")
        list(GET CACHE{_rocm_cmake_policies} ${_polname_ind} _polname)
        list(GET CACHE{_rocm_cmake_policies} ${_polvers_ind} _polvers)
        if(VERSION VERSION_GREATER_EQUAL _polvers)
            set_property(GLOBAL PROPERTY _rocm_policy_${_polname} NEW)
        else()
            set_property(GLOBAL PROPERTY _rocm_policy_${_polname} OLD)
        endif()
    endforeach()
endfunction()

function(rocm_cmake_policy)
    set(options PUSH POP)
    set(oneValueArgs VERSION)
    set(multiValueArgs SET GET)
    cmake_parse_arguments(PARSE "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
    _rocm_cmake_policy_syntax_check(${ARGN})
    if(PARSE_VERSION)
        _rocm_set_policies_by_version(${PARSE_VERSION})
    elseif(PARSE_SET)
        list(GET PARSE_SET 0 POLICY_TO_SET)
        list(GET PARSE_SET 1 POLICY_VALUE)
        if(POLICY_VALUE STREQUAL "NEW" AND NOT POLICY_TO_SET IN_LIST CACHE{_rocm_cmake_policies})
            message(AUTHOR_WARNING "This version of rocm-cmake does not know about policy ${POLICY_TO_SET}.")
        else()
            set_property(GLOBAL PROPERTY _rocm_policy_${POLICY_TO_SET} ${POLICY_VALUE})
        endif()
    elseif(PARSE_GET)
        list(GET PARSE_GET 0 POLICY_TO_GET)
        list(GET PARSE_GET 1 OUTPUT_VAR)
        
        set(${OUTPUT_VAR} $CACHE{_rocm_policy_${POLICY_TO_GET}} PARENT_SCOPE)
    elseif(PARSE_PUSH)
        math(EXPR stack_ind "$CACHE{_rocm_cmake_policy_stack_index} + 1")
        foreach(_polname_ind 0 $CACHE{_rocm_cmake_policy_max} 3)
            list(GET CACHE{_rocm_cmake_policies} _polname_ind _polname)
            get_property(_polval GLOBAL PROPERTY _rocm_policy_${_polname})
            list(APPEND stack_val "${_polval}")
        endforeach()
        set(_rocm_cmake_policy_stack_${stack_ind} "${stack_val}" CACHE INTERNAL "")
        set(_rocm_cmake_policy_stack_index "${stack_ind}" CACHE INTERNAL "")
    elseif(PARSE_POP)
        if(CACHE{_rocm_cmake_policy_stack_index} LESS 0)
            message(SEND_ERROR "Tried to pop from an empty rocm-cmake policy stack.")
        else()
            set(stack_item _rocm_cmake_policy_stack_$CACHE{_rocm_cmake_policy_stack_index})
            foreach(_polname_ind 0 $CACHE{_rocm_cmake_policy_max} 3)
                math(EXPR _polval_ind "${polname_ind} / 3")
                list(GET CACHE{_rocm_cmake_policies} _polname_ind _polname)
                list(GET CACHE{${stack_item}} _polval_ind _polval)
                set_property(GLOBAL PROPERTY _rocm_policy_${_polname} ${_polval})
            endforeach()
            unset(${stack_item} CACHE)
            math(EXPR stack_ind "$CACHE{_rocm_cmake_policy_stack_index} - 1")
            set(_rocm_cmake_policy_stack_index "${stack_ind}" CACHE INTERNAL "")
        endif()
    endif()
endfunction()

macro(_rocm_cmake_policy_syntax_check)
    set(_have_mode FALSE)
    set(_syntax_ok TRUE)
    if(PARSE_VERSION)
        list(LENGTH PARSE_VERSION _mode_nargs)
        if(NOT _mode_nargs EQUAL 1)
            set(_syntax_ok FALSE)
        endif()
        set(_have_mode TRUE)
    endif()
    foreach(_mode SET GET)
        if(PARSE_${_mode})
            list(LENGTH PARSE_${_mode} _mode_nargs)
            if(_have_mode OR NOT _mode_nargs EQUAL 2)
                set(_syntax_ok FALSE)
            endif()
            set(_have_mode TRUE)
        endif()
    endforeach()
    if(PARSE_PUSH)
        if(_have_mode)
            set(_syntax_ok FALSE)
        endif()
        set(_have_mode TRUE)
    endif()
    if(PARSE_POP AND _have_mode)
        if(_have_mode)
            set(_syntax_ok FALSE)
        endif()
        set(_have_mode TRUE)
    endif()
    if(NOT _syntax_ok OR NOT _have_mode)
        message(SEND_ERROR "Invalid syntax: rocm_cmake_policy(${ARGN})")
    endif()
endmacro()

if(PACKAGE_FIND_VERSION)
    _rocm_set_policies_by_version(${PACKAGE_FIND_VERSION})
    message(STATUS "Called ROCMPolicy")
endif()
